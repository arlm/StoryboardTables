// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.IO;
using Mono.Data.Sqlite;

namespace StoryboardTables
{
   public partial class TaskDetailViewController : UITableViewController
   {

      public TaskDetailViewController (IntPtr handle) : base (handle)
      {

      }
      TaskX currentTask {get;set;}
      public RootViewController Delegate {get;set;}



      public override void ViewDidLoad ()
      {
         string SQLitePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "IDBDBXZ.db3");

         base.ViewDidLoad ();





         SaveButton.TouchUpInside += (sender, e) => {
            currentTask.Name = TitleText.Text;
            currentTask.Notes = NotesText.Text;
            currentTask.Done = DoneSwitch.On;



            Delegate.SaveTask(currentTask);

            UpdateData(SQLitePath);


         };

         DeleteButton.TouchUpInside += (sender, e) => {
            Delegate.DeleteTask(currentTask);


            DeleteData(SQLitePath);




         };

         resmebaglan.TouchUpInside+= delegate
         {
            this.PerformSegue("resimGoster",this);
         };




      }


      private void CreateData (string databaseFile)
      {

         try
         {

            if (!File.Exists (databaseFile))
            {

               return;

            }
            //end if

            // Connect to database
            using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0}", databaseFile)))
            {

               sqlCon.Open ();

               using (SqliteCommand sqlCom = new SqliteCommand (sqlCon))
               {

                  sqlCom.CommandText = "INSERT INTO EMIRLERZ (Title, Subject) VALUES (@username, @password)";
                  sqlCom.Parameters.Add (new SqliteParameter ("@username",TitleText.Text ));
                  sqlCom.Parameters.Add (new SqliteParameter ("@password",systemx.Text));




                  sqlCom.ExecuteNonQuery ();

               }
               //end using sqlCom

               sqlCon.Close ();

            }
            //end using sqlCon


         } catch (Exception ex)
         {


         }//end try catch


      }//end void UpdateData





      private void UpdateData (string databaseFile)
      {

         try
         {

            if (!File.Exists (databaseFile))
            {

               return;

            }
            //end if

            // Connect to database
            using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0}", databaseFile))) 
            {

               sqlCon.Open ();

               if(idX.Text=="")
               {
                  using (SqliteCommand sqlCom = new SqliteCommand (sqlCon))
                  {

                     sqlCom.CommandText = "INSERT INTO Personel (UserName, Password) VALUES (@username, @password)";
                     sqlCom.Parameters.Add (new SqliteParameter ("@username",TitleText.Text ));
                     sqlCom.Parameters.Add (new SqliteParameter ("@password", NotesText.Text));




                     sqlCom.ExecuteNonQuery ();

                  }
               }
               if (idX.Text!=null)
               {
                  using (SqliteCommand sqlCom = new SqliteCommand (sqlCon)) 
                  {

                     sqlCom.CommandText = "UPDATE Personel SET UserName = @username , Password = @pass WHERE ID = @id";
                     sqlCom.Parameters.Add (new SqliteParameter ("@username", TitleText.Text));
                     sqlCom.Parameters.Add (new SqliteParameter ("@pass", NotesText.Text));

                     sqlCom.Parameters.Add (new SqliteParameter ("@id",currentTask.Id));

                     sqlCom.ExecuteNonQuery ();

                  }
                  //end using sqlCom

                  sqlCon.Close ();

               }
            }

            //end using sqlCon


         } catch (Exception ex) 
         {


         }
         //end try catch


      }//end void UpdateData



      private void DeleteData (string databaseFile)
      {

         try
         {

            if (!File.Exists (databaseFile))
            {

               return;

            }
            //end if

            // Connect to database
            using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0}", databaseFile)))
            {

               sqlCon.Open ();

               using (SqliteCommand sqlCom = new SqliteCommand (sqlCon))
               {
                  sqlCom.CommandText = "DELETE FROM Personel WHERE ID = @id";
                  sqlCom.Parameters.Add (new SqliteParameter ("@id",currentTask.Id));




                  sqlCom.ExecuteNonQuery ();

               }
               //end using sqlCom

               sqlCon.Close ();

            }
            //end using sqlCon

            new UIAlertView("silindi","tamam",null,"OK",null);
         } catch (Exception ex)
         {

            new UIAlertView("hata",ex.Message,null,"OK",null);

         }//end try catch

      }//end void InsertData




      // when displaying, set-up the properties
      public override void ViewWillAppear (bool animated)
      {
         base.ViewWillAppear (animated);
         TitleText.Text = currentTask.Name;
         systemx.Text = currentTask.Notes;
         DoneSwitch.On = currentTask.Done;
         idX.Text = currentTask.DocUrl;


      }

      // this will be called before the view is displayed 
      public void SetTask (RootViewController d, TaskX task) {
         Delegate = d;
         currentTask = task;
      }

      public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
      {
         base.PrepareForSegue(segue, sender);
         if (segue.Identifier.Equals("resimGoster"))
         {

            var view = (AsyncDownload)segue.DestinationViewController;



            view.downlodPicLink = currentTask.ImgUrl;



         }

      }




      public void IDGOSTER (string databaseFile)
      {

         try 
         {

            if (!File.Exists (databaseFile)) 
            {

               this.idmneT.Text = "Database file does not exist. Tap the appropriate button to create it.";
               return;

            }
            //end if

            // Connect to database
            using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0}", databaseFile))) 
            {

               sqlCon.Open ();

               using (SqliteCommand sqlCom = new SqliteCommand (sqlCon)) 
               {

                  sqlCom.CommandText = "SELECT * FROM Personel";

                  // Execute the SELECT statement and retrieve the data
                  using (SqliteDataReader dbReader = sqlCom.ExecuteReader ())
                  {

                     if (dbReader.HasRows)
                     {

                        // Advance through each row
                        while (dbReader.Read ())
                        {


                           TitleText.Text  = String.Format ("ID: {0}\n", Convert.ToString (dbReader["ID"]));

                        }
                        //end while

                     }
                     //end if

                  }//end using dbReader

               }
               //end using sqlCom

               sqlCon.Close ();

            }
            //end using sqlCon

            //  this.durumGostericiT.Text += "Customer data retrieved.\n";

         } catch (Exception ex) 
         {

            TitleText.Text= String.Format ("Erişim sağlanmıyor: {0}", ex.Message);

         }
         //end try catch

      }//end void SelectData










   }
}
