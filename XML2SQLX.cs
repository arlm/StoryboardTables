//// This file has been autogenerated from a class added in the UI designer.
//
//using System;
//
//using MonoTouch.Foundation;
//using MonoTouch.UIKit;
//using System.Xml.Linq;
//using System.Linq;
//using System.IO;
//using Mono.Data.Sqlite;
//
//
//namespace StoryboardTables
//{
//   public partial class XML2SQLX : UIViewController
//   {
//
//      // Kriptolu Data
//      //  string SQLitePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "MyDBXXcCc.db3");
//      string SQLitePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "IDBDBXZ.db3");
//
//      public string Subebilgileri { get; set;}
//
//      public void goster()
//      {
//         string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
//         string localFilename = "Login.xml";
//         string localPath = Path.Combine(documentsPath, localFilename);
//
//         XDocument doc = XDocument.Load(localPath);
//
//
//         var data = from x in doc.Descendants("id") where x.Element("Sube").Value == "Z"
//                    select new {id = x.Element("Password").Value};
//
//         foreach (var p in data)
//            userF.Text += p.id;
//
//      }
////
////      public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
////      {
////         if (segue.Identifier == "baslatxxx") { // set in Storyboard
////
////
////            var navctlr = segue.DestinationViewController as RootViewControllerX;
////
////            if (navctlr != null)
////               navctlr.SubeVerisi = "hal";
////
////         }
////
////      }
////
//
//
//
//      public override void ViewDidLoad()
//      {
//
//
//         base.ViewDidLoad();
//         //  new UIAlertView(Subebilgileri, "mesaj", null, "OK", null).Show();
//         subeF.Text= Subebilgileri;
//
//         listeleX.TouchUpInside+= delegate
//         {
//            goster();
//
//
//         };
//
//         kaydetX.TouchUpInside+= delegate
//         {
//            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
//            string localFilename = "mobelsis.xml";
//            string localPath = Path.Combine(documentsPath, localFilename);
//
//            XDocument doc = XDocument.Load(localPath);
//            var data = from x in doc.Descendants("item")
//                       //             where x.Element("baslik").Value == "Android Versiyonu Online"
//                       select new {id = x.Element("baslik").Value, user= x.Element("tarih").Value};
//            foreach (var p in data)
//            {
//               passF.Text+= p.id.ToString();
//               subeF.Text+= p.user.ToString();
//            }
//
//         };
//
//         olusturX.TouchUpInside+= delegate
//         {
//               CreateDB(SQLitePath);         
//
//         };
//         baslatXX.TouchUpInside+= delegate
//         {
//
//         };
//         sys.TouchUpInside+= delegate
//         {
//            InsertData(SQLitePath);
//           
//         };
//
//      }
//
//      public XML2SQLX (IntPtr handle) : base (handle)
//      {
//      }
//
//
//
//      //Database Segment
//
//
//
//      public void CreateDB(string databaseFile)
//      {
//         try
//         {
//
//            // Check if database already exists
//            if (!File.Exists (databaseFile))
//            {
//
//               // Create the database
//               SqliteConnection.CreateFile (databaseFile);
//
//               // Connect to the database
//               using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0};", databaseFile)))
//               {
//                  sqlCon.Open ();
//
//                  // Create a table
//                  using (SqliteCommand sqlCom = new SqliteCommand (sqlCon))
//                  {
//
//
//                     sqlCom.CommandText = "CREATE TABLE IF NOT EXISTS ZSUBE (ID INTEGER PRIMARY KEY, UserName VARCHAR(20), Password VARCHAR(20))";
//                     //veri Ekleme
//                     //Update
//                     //   sqlCom.CommandText = "UPDATE Customers SET FirstName= 'Haluk' WHERE LastName = @lastName";
//                     // sqlCom.Parameters.Add(new SqliteParameter("@lastName","Haluky"));
//
//
//
//                     sqlCom.ExecuteNonQuery ();
//
//                     Console.WriteLine(sqlCom.ExecuteNonQuery());
//                  }
//                  //end using sqlCom
//
//                  sqlCon.Close ();
//
//               }
//               //end using sqlCon
//
//               this.durumF.Text = "hazır!";
//
//
//            } else
//            {
//
//               this.durumF.Text = "Mevcut!";
//
//            }//end if else
//
//         } catch (Exception ex)
//         {
//
//            this.durumF.Text = String.Format ("Sqlite error: {0}", ex.Message);
//
//         }//end try catch
//      }
//
//
//
//
//      private void InsertData (string databaseFile)
//      {
//
//         try
//         {
//
//            if (!File.Exists (databaseFile))
//            {
//
//               this.durumF.Text = "Database file does not exist. Tap the appropriate button to create it.";
//               return;
//
//            }
//            //end if
//
//            // Connect to database
//            using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0}", databaseFile)))
//            {
//
//               sqlCon.Open ();
//
//               using (SqliteCommand sqlCom = new SqliteCommand (sqlCon))
//               {
//
//                  string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
//                  string localFilename = "Login.xml";
//                  string localPath = Path.Combine(documentsPath, localFilename);
//
//                  XDocument doc = XDocument.Load(localPath);
//
//
//                  var data = from x in doc.Descendants("id") where x.Element("Sube").Value == "Z"
//                             select new {un = x.Element("UserName").Value, pass= x.Element("Password").Value};
//                  foreach (var p in data)
//                  {
//
//
//                     sqlCom.CommandText = "INSERT INTO ZSUBE (UserName, Password) VALUES (@username, @password)";
//                     sqlCom.Parameters.Add (new SqliteParameter ("@username",p.un ));
//                     sqlCom.Parameters.Add (new SqliteParameter ("@password", p.pass));
//
//                     sqlCom.ExecuteNonQuery ();
//                  }
//
//
//
//               }
//               //end using sqlCom
//
//               sqlCon.Close ();
//
//            }
//            //end using sqlCon
//
//            this.durumF.Text = "Veri Girildi.";
//
//         } catch (Exception ex)
//         {
//
//            this.durumF.Text = String.Format ("Sqlite hatası: {0}", ex.Message);
//
//         }//end try catch
//
//      }//end void InsertData
//
//
//
//
//
//
//
//
//      public void SelectData (string databaseFile)
//      {
//
//
//         try 
//         {
//
//            if (!File.Exists (databaseFile)) 
//            {
//
//               this.durumF.Text = "Database file does not exist. Tap the appropriate button to create it.";
//               return;
//
//            }
//            //end if
//
//            // Connect to database
//            using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0}", databaseFile))) 
//            {
//
//               sqlCon.Open ();
//
//               using (SqliteCommand sqlCom = new SqliteCommand (sqlCon)) 
//               {
//
//                  sqlCom.CommandText = "SELECT * FROM ZSUBE WHERE Password = @lastName and UserName = @username";
//                  sqlCom.Parameters.Add (new SqliteParameter ("@lastName", passF.Text));
//                  sqlCom.Parameters.Add (new SqliteParameter ("@username", userF.Text));
//
//                  // Execute the SELECT statement and retrieve the data
//                  using (SqliteDataReader dbReader = sqlCom.ExecuteReader ())
//                  {
//
//                     if (dbReader.HasRows)
//                     {
//
//                        // Advance through each row
//                        while (dbReader.Read ())
//                        {
//
//                           durumF.Text="eşlenme sağlandı";
//
//                           this.durumF.Text += String.Format ("ID: {0}\n", Convert.ToString (dbReader["ID"]));
//                           this.durumF.Text += String.Format (" : {0}\n", Convert.ToString (dbReader["Password"]));
//                           this.PerformSegue("ZSUBEX",this);
//
//                        }
//                        //end while
//
//                     }
//                     //end if
//
//                  }//end using dbReader
//
//               }
//               //end using sqlCom
//
//               sqlCon.Close ();
//
//            }
//            //end using sqlCon
//
//            //  this.durumGostericiT.Text += "Customer data retrieved.\n";
//
//         } catch (Exception ex) 
//         {
//
//            this.durumF.Text = String.Format ("Erişim sağlanmıyor: {0}", ex.Message);
//
//         }
//         //end try catch
//
//      }//end void SelectData
//
//
//
//
//
//
//
//   }
//
//
//
//}


// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Xml.Linq;
using System.Linq;
using System.IO;
using Mono.Data.Sqlite;


namespace StoryboardTables
{
   public partial class XML2SQLX : UIViewController
   {

      // Kriptolu Data
      //  string SQLitePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "MyDBXXcCc.db3");
      string SQLitePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "IDBDATABASEX.db3");

      public string Subebilgileri { get; set;}

      public void goster()
      {
         string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
         string localFilename = "Login.xml";
         string localPath = Path.Combine(documentsPath, localFilename);

         XDocument doc = XDocument.Load(localPath);


         var data = from x in doc.Descendants("id") where x.Element("Sube").Value == "Z"
                    select new {id = x.Element("Password").Value};

         foreach (var p in data)
            userF.Text += p.id;

      }

      public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
      {
         if (segue.Identifier == "lin2Data") { // set in Storyboard


            var navctlr = segue.DestinationViewController as SubeViewListController;

            if (navctlr != null)
               navctlr.SubeVerisi = Subebilgileri;

         }


         else if (segue.Identifier=="SegueEmirListesi")
         { // set in Storyboard


            var navctlr = segue.DestinationViewController as RootViewController;

            if (navctlr != null)
               navctlr.SubeVerisi = Subebilgileri;

         }



      }




      public override void ViewDidLoad()
      {


         base.ViewDidLoad();


         new UIAlertView(Subebilgileri,subeF.ToString(), null, "OK", null).Show();

         subeF.Text= Subebilgileri;

         listeleX.TouchUpInside+= delegate
         {
            goster();


         };

         kaydetX.TouchUpInside+= delegate
         {
            string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
            string localFilename = "mobelsis.xml";
            string localPath = Path.Combine(documentsPath, localFilename);

            XDocument doc = XDocument.Load(localPath);
            var data = from x in doc.Descendants("item")
                       //             where x.Element("baslik").Value == "Android Versiyonu Online"
                       select new {id = x.Element("baslik").Value, user= x.Element("tarih").Value};
            foreach (var p in data)
            {
               passF.Text+= p.id.ToString();
               subeF.Text+= p.user.ToString();
            }

         };

         olusturX.TouchUpInside+= delegate
         {
            CreateDB(SQLitePath);         

         };
         baslatXX.TouchUpInside+= delegate
         {

         };
         sys.TouchUpInside+= delegate
         {
            InsertData(SQLitePath);
         };

         ListeliGonder.TouchUpInside+= delegate
         {
            this.PerformSegue("lin2Data",this);
         };

         xxx.TouchUpInside+= delegate
         {
            this.PerformSegue("lin2Data",this);

         };


         

      }

      public XML2SQLX (IntPtr handle) : base (handle)
      {
      }



      //Database Segment



      public void CreateDB(string databaseFile)
      {
         try
         {


            // Connect to the database
            using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0};", databaseFile)))
            {
               sqlCon.Open ();

               // Create a table
               using (SqliteCommand sqlCom = new SqliteCommand (sqlCon))
               {
                  if (!File.Exists (databaseFile))
                  {

                     // Create the database
                     SqliteConnection.CreateFile (databaseFile);


                  }

                  if(Subebilgileri=="Z")

                  sqlCom.CommandText = "CREATE TABLE IF NOT EXISTS ZSUBE (ID INTEGER PRIMARY KEY, UserName VARCHAR(20), Password VARCHAR(20))";
                
                  else if (Subebilgileri=="Y")

                     sqlCom.CommandText = "CREATE TABLE IF NOT EXISTS YSUBE (ID INTEGER PRIMARY KEY, UserName VARCHAR(20), Password VARCHAR(20))";

                  else if(Subebilgileri=="X")

                     sqlCom.CommandText = "CREATE TABLE IF NOT EXISTS XSUBE (ID INTEGER PRIMARY KEY, UserName VARCHAR(20), Password VARCHAR(20))";

                    //veri Ekleme
                  //Update
                  //   sqlCom.CommandText = "UPDATE Customers SET FirstName= 'Haluk' WHERE LastName = @lastName";
                  // sqlCom.Parameters.Add(new SqliteParameter("@lastName","Haluky"));



                  sqlCom.ExecuteNonQuery ();

                  Console.WriteLine(sqlCom.ExecuteNonQuery());
               }
               //end using sqlCom

               sqlCon.Close ();

            }
            //end using sqlCon

            this.durumF.Text = "hazır!";




         } catch (Exception ex)
         {

            this.durumF.Text = String.Format ("Sqlite error: {0}", ex.Message);

         }//end try catch
      }




      private void InsertData (string databaseFile)
      {

         try
         {

            if (!File.Exists (databaseFile))
            {

               this.durumF.Text = "Database file does not exist. Tap the appropriate button to create it.";
               return;

            }
            //end if

            // Connect to database
            using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0}", databaseFile)))
            {

               sqlCon.Open ();

               using (SqliteCommand sqlCom = new SqliteCommand (sqlCon))
               {

                  string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
                  string localFilename = "Login.xml";
                  string localPath = Path.Combine(documentsPath, localFilename);

                  XDocument doc = XDocument.Load(localPath);


                  var data = from x in doc.Descendants("id") where x.Element("Sube").Value == "Z"
                             select new {un = x.Element("UserName").Value, pass= x.Element("Password").Value};


                  foreach (var p in data)
                  {


                     sqlCom.CommandText = "INSERT INTO ZSUBE (UserName, Password) VALUES (@username, @password)";
                     sqlCom.Parameters.Add (new SqliteParameter ("@username",p.un ));
                     sqlCom.Parameters.Add (new SqliteParameter ("@password", p.pass));

                     sqlCom.ExecuteNonQuery ();
                  }



               }
               //end using sqlCom

               sqlCon.Close ();

            }
            //end using sqlCon

            this.durumF.Text = "Veri Girildi.";

         } catch (Exception ex)
         {

            this.durumF.Text = String.Format ("Sqlite hatası: {0}", ex.Message);

         }//end try catch

      }//end void InsertData








      public void SelectData (string databaseFile)
      {


         try 
         {

            if (!File.Exists (databaseFile)) 
            {

               this.durumF.Text = "Database file does not exist. Tap the appropriate button to create it.";
               return;

            }
            //end if

            // Connect to database
            using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0}", databaseFile))) 
            {

               sqlCon.Open ();

               using (SqliteCommand sqlCom = new SqliteCommand (sqlCon)) 
               {

                  sqlCom.CommandText = "SELECT * FROM ZSUBE WHERE Password = @lastName and UserName = @username";
                  sqlCom.Parameters.Add (new SqliteParameter ("@lastName", passF.Text));
                  sqlCom.Parameters.Add (new SqliteParameter ("@username", userF.Text));

                  // Execute the SELECT statement and retrieve the data
                  using (SqliteDataReader dbReader = sqlCom.ExecuteReader ())
                  {

                     if (dbReader.HasRows)
                     {

                        // Advance through each row
                        while (dbReader.Read ())
                        {

                           durumF.Text="eşlenme sağlandı";

                           this.durumF.Text += String.Format ("ID: {0}\n", Convert.ToString (dbReader["UserName"]));
                           this.durumF.Text += String.Format (" : {0}\n", Convert.ToString (dbReader["Password"]));
                           this.PerformSegue("lin2Data",this);

                        }
                        //end while

                     }
                     //end if

                  }//end using dbReader

               }
               //end using sqlCom

               sqlCon.Close ();

            }
            //end using sqlCon

            //  this.durumGostericiT.Text += "Customer data retrieved.\n";

         } catch (Exception ex) 
         {

            this.durumF.Text = String.Format ("Erişim sağlanmıyor: {0}", ex.Message);

         }
         //end try catch

      }//end void SelectData







   }



}

