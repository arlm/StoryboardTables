// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.IO;
using Mono.Data.Sqlcipher;

namespace StoryboardTables
{
   public partial class CryptX : UIViewController
   {
      string SQLitePathX =  Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "cryptedDb.db3");

      public CryptX (IntPtr handle) : base (handle)
      {

      }


      public override void ViewDidLoad()
      {
         base.ViewDidLoad();


         dbOlusturX.TouchUpInside += delegate
         {
            CreateCrypted(SQLitePathX);
         };

         listeleX.TouchUpInside += delegate
         {
            SelectData(SQLitePathX);
         };


         ekleX.TouchUpInside+= delegate
         {
            InsertData(SQLitePathX);
         };

      }



      public void SelectData (string databaseFile)
      {

         try 
         {

            if (!File.Exists (databaseFile)) 
            {

               this.durumGostericiT.Text = "Database file does not exis            using (SqliteConnection sqlCon = new SqliteConnection (String.Format (\"Data Source = {0}\", databaseFile))) \nt. Tap the appropriate button to create it.";
               return;

            }
            //end if

            // Connect to database
            using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0}", databaseFile))) 

            {
               sqlCon.SetPassword("haluk");
               sqlCon.Open ();

               using (SqliteCommand sqlCom = new SqliteCommand (sqlCon)) 
               {

                  sqlCom.CommandText = "SELECT * FROM Personel WHERE Password = @lastName and UserName = @username";
                  sqlCom.Parameters.Add (new SqliteParameter ("@lastName", passwordF.Text));
                  sqlCom.Parameters.Add (new SqliteParameter ("@username", usernameF.Text));

                  // Execute the SELECT statement and retrieve the data
                  using (SqliteDataReader dbReader = sqlCom.ExecuteReader ())
                  {

                     if (dbReader.HasRows)
                     {

                        // Advance through each row
                        while (dbReader.Read ())
                        {

                           durumGostericiT.Text="eşlenme sağlandı";

                           this.usernameF.Text += String.Format ("ID: {0}\n", Convert.ToString (dbReader["UserName"]));
                           this.passwordF.Text += String.Format (" : {0}\n", Convert.ToString (dbReader["Password"]));
                           this.PerformSegue("GondericiC",this);

                        }
                        //end while

                     }

                     //end if

                  }//end using dbReader

               }
               //end using sqlCom

               sqlCon.Close ();

            }
            //end using sqlCon

            //  this.durumGostericiT.Text += "Customer data retrieved.\n";

         } catch (Exception ex) 
         {

            this.durumGostericiT.Text = String.Format ("{0}", ex.Message);

         }
         //end try catch

      }//end void SelectData


      public void CreateCrypted(string databaseFile)
      {
         try
         {

            // Check if database already exists
            if (!File.Exists (databaseFile))
            {

               // Create the database
               SqliteConnection.CreateFile (databaseFile);

               // Connect to the database

               // using (SqliteConnection sqlCon = GetConnection (String.Format ("Data Source = {0};", databaseFile),"haluk"))
               using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0}", databaseFile))) 

               {
                  sqlCon.SetPassword("haluk");
                  sqlCon.Open ();

                  // Create a table
                  using (SqliteCommand sqlCom = new SqliteCommand (sqlCon))
                  {
                     sqlCom.CommandText = "CREATE TABLE Personel (ID INTEGER PRIMARY KEY, UserName VARCHAR(20), Password VARCHAR(20))";
                     //veri Ekleme
                     //Update
                     //   sqlCom.CommandText = "UPDATE Customers SET FirstName= 'Haluk' WHERE LastName = @lastName";
                     // sqlCom.Parameters.Add(new SqliteParameter("@lastName","Haluky"));



                     sqlCom.ExecuteNonQuery ();

                     Console.WriteLine(sqlCom.ExecuteNonQuery());
                  }
                  //end using sqlCom

                  sqlCon.Close ();

               }
               //end using sqlCon

               this.durumGostericiT.Text = "Database hazır!";


            }else
            {

               this.durumGostericiT.Text = "Database Mevcut!";

            }//end if else

         } catch (Exception ex)
         {

            this.durumGostericiT.Text = String.Format ("Sqlite error: {0}", ex.Message);

         }//end try catch
      }




      private void InsertData (string databaseFile)
      {

         try
         {

            if (!File.Exists (databaseFile))
            {

               this.durumGostericiT.Text = "Database file does not exist. Tap the appropriate button to create it.";
               return;

            }
            //end if

            // Connect to the database

            using (SqliteConnection sqlCon = new SqliteConnection (String.Format ("Data Source = {0}", databaseFile))) 
            {
               sqlCon.SetPassword("haluk");
               sqlCon.Open ();
               using (SqliteCommand sqlCom = new SqliteCommand (sqlCon))
               {

                  sqlCom.CommandText = "INSERT INTO Personel (UserName, Password) VALUES (@username, @password)";
                  sqlCom.Parameters.Add (new SqliteParameter ("@username",usernameF.Text ));
                  sqlCom.Parameters.Add (new SqliteParameter ("@password", passwordF.Text));




                  sqlCom.ExecuteNonQuery ();

               }
               //end using sqlCom

               sqlCon.Close ();

            }
            //end using sqlCon

            this.durumGostericiT.Text = "Veri Girildi.";

         } catch (Exception ex)
         {

            this.durumGostericiT.Text = String.Format ("Sqlite hatası: {0}", ex.Message);

         }//end try catch

      }//end void InsertData


      private SqliteConnection GetConnection(String databaseName, String password)
      {
         var databasePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), databaseName);
         var conn =  new SqliteConnection(String.Format("Data Source={0}", databasePath));
         conn.SetPassword(password);
         return conn;
      }


   }
}
